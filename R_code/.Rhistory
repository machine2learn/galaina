version
system("type R")
locale
Sys.getlocale()
Sys.getlocale()
system("type R")
ile.path(R.home("bin"), "R")
file.path(R.home("bin"), "R")
R.home()
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="~/installed_packages.rda")
getwd(
)
setwd("projects/aggressotype/code/R_code/")
list.files()
list.files
file.list(
)
list.files()
list.files()
list.files()
source(test.R)
source("test.R")
traceback()
source("test.R")
traceback()
source("test.R")
load(file = '/Volumes/encrypted_preprocessed_data/demo_aggressotype_transfer.rda')
data_matrix
data_matrix <- as.numeric(data_matrix)
data_matrix
data_matrix <- data.matrix(data_matrix)
data_matrix
load(file = '/Volumes/encrypted_preprocessed_data/demo_aggressotype_transfer.rda')
tmp_data_matrix <- data.matrix(data_matrix)
head(tmp_data_matrix)
typeof(tmp_data_matrix)
data <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/data_df.csv'
)
data
typeof(data)
data <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/data_df.csv'
)
data <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/data_df.csv', row.names = 1)
typeof(data)
header(data)
head(data)
data_df <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/data_df.csv', row.names = 1)
loading_df <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/loading_df.csv', row.names = 1)
factor_loading_df <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/factor_loading_df.csv', row.names = 1)
data_matrix <- as.matrix(data_df)
data_matrix
factor_loading_df <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/factor_loading_df.csv', row.names = 1)
factor_names <- colnames(factor_loading_df)
factor_names
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
source("test.R")
source("test.R")
traceback()
Lambda = 1 * (Lambda!=0)
Lambda <- factor_loading_df
Lambda = 1 * (Lambda!=0)
Lambda
index.1 = which(colSums(Lambda) == 1)
index.1
Y <- as.matrix(data_df)
vnames <- colnames(Y)
colnames(Y) <- vnames
Y
R <- NULL
for (j in 1:p) {
R <- cbind(R, match(Y[, j], sort(unique(Y[, j]))))
}
p <- dim(Y)[2]
R <- NULL
for (j in 1:p) {
R <- cbind(R, match(Y[, j], sort(unique(Y[, j]))))
}
R
Rlevels <- apply(R, 2, max, na.rm = TRUE)
Ranks <- apply(Y, 2, rank, ties.method = "average", na.last = "keep")
N <- apply(!is.na(Ranks), 2, sum)
U <- t(t(Ranks)/(N + 1))
Z <- qnorm(U)
# handle categorical variable
Z[, ind.cat] = Y[, ind.cat]
#
Zfill <- matrix(rnorm(n * p), n, p)
Z[is.na(Y)] <- Zfill[is.na(Y)]
# psuedo data of factors with a single indicator
Z1 = eta1 = Z[, index.1]
# psuedo data of response variables
if (k1 == 0) Z2 = Z else Z2 = Z[, -index.1]
# psuedo data of factors with multiple indicators
eta2 = matrix(rnorm(n*k2), n)
eta = cbind(eta1, eta2)
X = cbind(eta, Z2)
source("~/projects/aggressotype/external_code/CopulaFactorModel/R/inferCopulaFactorModel.R")
Rlevels <- apply(R, 2, max, na.rm = TRUE)
Ranks <- apply(Y, 2, rank, ties.method = "average", na.last = "keep")
N <- apply(!is.na(Ranks), 2, sum)
U <- t(t(Ranks)/(N + 1))
Z <- qnorm(U)
# handle categorical variable
Z[, ind.cat] = Y[, ind.cat]
#
Zfill <- matrix(rnorm(n * p), n, p)
Z[is.na(Y)] <- Zfill[is.na(Y)]
# psuedo data of factors with a single indicator
Z1 = eta1 = Z[, index.1]
# psuedo data of response variables
if (k1 == 0) Z2 = Z else Z2 = Z[, -index.1]
# psuedo data of factors with multiple indicators
eta2 = matrix(rnorm(n*k2), n)
eta = cbind(eta1, eta2)
X = cbind(eta, Z2)
n <- dim(Y)[1]
Rlevels <- apply(R, 2, max, na.rm = TRUE)
Ranks <- apply(Y, 2, rank, ties.method = "average", na.last = "keep")
N <- apply(!is.na(Ranks), 2, sum)
U <- t(t(Ranks)/(N + 1))
Z <- qnorm(U)
# handle categorical variable
Z[, ind.cat] = Y[, ind.cat]
#
Zfill <- matrix(rnorm(n * p), n, p)
Z[is.na(Y)] <- Zfill[is.na(Y)]
# psuedo data of factors with a single indicator
Z1 = eta1 = Z[, index.1]
# psuedo data of response variables
if (k1 == 0) Z2 = Z else Z2 = Z[, -index.1]
# psuedo data of factors with multiple indicators
eta2 = matrix(rnorm(n*k2), n)
eta = cbind(eta1, eta2)
X = cbind(eta, Z2)
Y <- as.matrix(Y)
vnames <- colnames(Y)
colnames(Y) <- vnames
# sample size
n <- dim(Y)[1]
# No. of observed variables
p <- dim(Y)[2]
#### handle Lambda and get prior graph G
Lambda = 1 * (Lambda!=0)
# No. of factors
k = ncol(Lambda)
# index of factors with a single indicator
index.1 = which(colSums(Lambda) == 1)
# No. of factors with a single indicator
k1 = length(index.1)
# index of factors with multiple indicators
index.2 = which(colSums(Lambda) > 1)
# No. of factors with multiple indicators
k2 = length(index.2)
## get the pior graph G
G1 = matrix(1,k,k)-diag(k)
if (k1 == 0) G2 = t(Lambda) else G2 = t(Lambda[-index.1,])
G3 = matrix(0,p-k1,p-k1)
G = rbind(cbind(G1,G2),cbind(t(G2),G3))
G[lower.tri(G)] = 0
## prior parameters for the G-Wishart distribution
# degrees of freedom
n0 = p+k2+1
# scale matrix
S0 = diag(p+k2)/n0
#### initialize Z, eta, and S
R <- NULL
for (j in 1:p) {
R <- cbind(R, match(Y[, j], sort(unique(Y[, j]))))
}
Rlevels <- apply(R, 2, max, na.rm = TRUE)
Ranks <- apply(Y, 2, rank, ties.method = "average", na.last = "keep")
N <- apply(!is.na(Ranks), 2, sum)
U <- t(t(Ranks)/(N + 1))
Z <- qnorm(U)
# # handle categorical variable
# Z[, ind.cat] = Y[, ind.cat]
#
Zfill <- matrix(rnorm(n * p), n, p)
Z[is.na(Y)] <- Zfill[is.na(Y)]
# psuedo data of factors with a single indicator
Z1 = eta1 = Z[, index.1]
# psuedo data of response variables
if (k1 == 0) Z2 = Z else Z2 = Z[, -index.1]
# psuedo data of factors with multiple indicators
eta2 = matrix(rnorm(n*k2), n)
eta = cbind(eta1, eta2)
X = cbind(eta, Z2)
S <- cov(X)
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
traceback()
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
source("test.R")
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
source("test.R")
source("test.R")
.Machine$double.eps
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
source("test.R")
source("test.R")
traceback()
cat("Iteration:", 4)
source("test.R")
source("test.R")
source("test.R")
source("test.R")
traceback()
data_df
sum(data_df)
sum(as.matrix(data_df))
sum(data.matrix(data_df))
B = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
B = matrix(
c(2, 4, 3, 1, 5, 7),
nrow=3,
ncol=2)
B
sum(B)
sum(abs(B)
)
norm(B)
norm(B, "E")
norm(B, "F")
sqrt(sum(B^2))
norm(B, "1")
source("test.R")
source("test.R")
a = matrix(rnorm(16), ncol=4)
a
make.symmetric(a, lower.tri=FALSE)
source("test.R")
source("test.R")
traceback()
source("test.R")
traceback()
source("test.R")
source("test.R")
source("test.R")
source("test.R")
library(utils)
library(tools)  # to get file extension
library(dplyr)  # actually I load it only for filter
library(ggplot2)  # to save in SVG on R installed via homebrew  https://stackoverflow.com/questions/50767445/how-to-fix-failed-to-load-cairo-dll-in-r
library(ggplotify)  # to convert plot to grob objects
library(grid)
library(stringi)  # to check if strings are empty
library(sbgcop)
library(infotheo)
library(BDgraph)
library(pcalg)  # depends on bioconductor
library(bnlearn)
library(ConfigParser)
source('~/projects/aggressotype/code/galaina/R_code/20180725_use_config_ini_final_part.R', echo=TRUE)
args <- c("/Users/fabio/projects/aggressotype/code/software/software_demo/config_estonian_restricted_demo_relaxed_less_null.ini")
config <- ConfigParser$new(Sys.getenv(), optionxform=identity)
config$read(filepath = args[1])
# path_to_bn_strength_obj = "/Users/fabio/bn_strength_obj.rds"  # TODO put in INI
path_to_bn_strength_obj <- config$get(option = "output_path_bn_strength_obj", fallback = "", section = "output_paths")
path_to_avg_bn_obj <- config$get(
option = "output_path_avg_bn_obj",
fallback = "", section = "output_paths"
)
bn_strength_obj <- readRDS(path_to_bn_strength_obj)
avg_bn_obj <- readRDS(path_to_avg_bn_obj)
first_title = 'RPQ Causal Discovery Results'
graph_am <- strength.plot(x = avg_bn_obj, strength = bn_strength_obj, threshold = attributes(bn_strength_obj)$threshold, main = first_title)
View(graph_am)
View(graph_am)
first_title = 'Causal discovery'
graph_am <- strength.plot(x = avg_bn_obj, strength = bn_strength_obj, threshold = attributes(bn_strength_obj)$threshold, main = first_title)
graph_nel <- strength.plot(x = avg_bn_obj, strength = bn_strength_obj, threshold = attributes(bn_strength_obj)$threshold, main = first_title)
saveRDS(graph_nel, file = "~/estonian_graph.nel")
graph_bn <- as.bn(graph_nel)
write.dot(file = "~/Documents/figures/estonian.gv", graph_bn)
graph_bn <- as.bn.fit(graph_nel)
library(graph)
toDotR(graph = graph_nel, filename = "~/Documents/figures/estonian.gv")
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian.gv")
toDotR(G = graph_nel, outDotFile = "~/Documents/figures/estonian.gv")
graph_nel <- strength.plot(x = avg_bn_obj, strength = bn_strength_obj, threshold = attributes(bn_strength_obj)$threshold, main = first_title)
View(graph_nel)
View(graph_nel)
View(graph_nel)
toDotR(G = graph_nel, outDotFile = "~/Documents/figures/estonian.gv", renderList = attributes(graph_nel)$renderInfo)
attributes(graph_nel)$renderInfo
attributes(graph_nel)$renderInfo$lwd
attributes(graph_nel)$renderInfo.lwd
attributes(attributes(graph_nel)$renderInfo)$lwd
attributes(attributes(graph_nel)$renderInfo$edges$lwd
)
attributes(graph_nel)$renderInfo$edges$lwd
attributes(attributes(attributes(graph_nel)$renderInfo)$edges)$lwd
attributes(attributes(attributes(graph_nel)$renderInfo[[edges]]
))))
attributes(graph_nel)$renderInfo[[edges]]
attributes(graph_nel)$renderInfo[["edges"]]
attributes(graph_nel)$renderInfo
attributes(attributes(graph_nel)$renderInfo)
attributes(graph_nel)$renderInfo$edges$lwd
attributes(attributes(graph_nel)$renderInfo)
attributes(attributes(attributes(graph_nel)$renderInfo)$edges)$lwd
attributes(attributes(attributes(graph_nel)$renderInfo)$edges)
attributes(attributes(attributes(graph_nel)$renderInfo)$edges)$names["lwd"]
attributes(attributes(attributes(graph_nel)$renderInfo)$edges)$names[["lwd"]]
attributes(attributes(attributes(graph_nel)$renderInfo)$edges)$names
attributes(attributes(attributes(graph_nel)$renderInfo)$edges)$lwd
attributes(attributes(attributes(graph_nel)$renderInfo)$edges)
graph_nel@renderInfo@edges[['lwd']]
graph2graphviz
graph2graphviz(graph_nel)
graph_nel.plot
plot(graph_nel)
toDotR(G = graph_nel, outDotFile = "~/Documents/figures/estonian.gv", renderList = graph_nel@renderInfo)
toDotR(G = graph_nel, outDotFile = "~/Documents/figures/estonian.gv", renderList = "list", optList = "list")
toDotR(G = graph_nel, outDotFile = "~/Documents/figures/estonian.gv", renderList = "list")
toDotR(G = graph_nel, outDotFile = "~/Documents/figures/estonian.gv", renderList = attributes(graph_nel@renderInfo))
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment.gv")
library(Rgraphviz)
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment.gv")
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment.gv", edgeAttrs)
graph:::graph2graphviz(graph_nel)
graph:::graph2graphviz(graph_nel)
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment.gv", edgeAttrs=edges(graph_nel))
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment.gv", edgeAttrs=edgeL(graph_nel))
View(strength.plot())
View(strength.plot
)
View(graphviz.backend)
View(graphviz::graphviz.backend)
View(graph::graphviz.backend)
graphviz.backend(nodes = names(x$nodes), arcs = x$arcs,
highlight = highlight, arc.weights = arc.weights, layout = layout,
shape = shape, main = main, sub = sub)
}
graphviz.backend()
bnlearn:::graphviz.backend(nodes = names(x$nodes), arcs = x$arcs,
highlight = highlight, arc.weights = arc.weights, layout = layout,
shape = shape, main = main, sub = sub)
View(bnlearn:::graphviz.backend)
toFile(graph = graph_nel, filetype = "gv", filename = "~/Documents/figures/estonian_tofile.gv")
toFile(graph = graph_nel, filetype = "dot", filename = "~/Documents/figures/estonian_tofile.gv")
toFile(graph = graph_nel, fileType = "dot", filename = "~/Documents/figures/estonian_tofile.gv")
as.bn(graph_nel)
write.dot(file = "~/Documents/figures/test.gv", graph = as.bn(graph_nel))
write.dot(file = "~/Documents/figures/test.gv", graph = as.bn.fit(graph_nel))
tmp_bn <- as.bn(graph_nel)
tmp_bn$arcs
tmp_arcs <- tmp_bn$arcs
colnames(tmp_arcs) = c("from", "to")
View(tmp_bn)
View(tmp_arcs)
tmp_bn$arcs <- tmp_arcs
write.dot(file = "~/Documents/figures/test.gv", graph = tmp_bn)
tmp_bn <- as.bn.fit(graph_nel)
edgeWeights(graph_ne;)
edgeWeights(graph_nel)
tmp_edge_weights <- edgeWeights(graph_nel)
View(tmp_edge_weights)
View(tmp_edge_weights)
graph_nel@renderInfo@edges@lwd
graph_nel@renderInfo@edges[['lwd']]
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment.gv", edgeAttrs=edgeL(graph_nel))
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment.gv", edgeAttrs=edges(graph_nel))
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment.gv", edgeAttrs=graph_nel@edgeL)
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment.gv")
source('just_for_playing_with_graph.R')
source('just_for_playing_with_graph.R')
graph_nel@edgeData[["Bully_other|Victim_other"]][["weight"]]
graph_nel@edgeData@data[["Bully_other|Victim_other"]][["weight"]]
graph_nel@renderInfo@edges[['lwd']]
graph_nel@renderInfo@edges[["lwd"]][["Bully_other~Victim_other"]]
graph_nel@edgeData@data[["Bully_other|Victim_other"]][["weight"]] <- graph_nel@renderInfo@edges[["lwd"]][["Bully_other~Victim_other"]]
View(graph_nel)
View(graph_nel)
typeof(graph_nel@renderInfo@edges[["lwd"]])
names(graph_nel@renderInfo@edges[["lwd"]])
tmp_key_v <- names(graph_nel@renderInfo@edges[["lwd"]])
gsub("[~]", "|", tmp_key_v)
lwd_key2data_key <- mapply(c, tmp_key_v, gsub("[~]", "|", tmp_key_v), SIMPLIFY = FALSE)
View(lwd_key2data_key)
tmp_key_v
typeof(tmp_key_v)
View(lwd_key2data_key)
lwd_key2data_key <- gsub("[~]", "|", tmp_key_v)
View(lwd_key2data_key)
View(tmp_key_v)
lwd_key2data_key <- mapply(c, tmp_key_v, gsub("[~]", "|", tmp_key_v), SIMPLIFY = FALSE, USE.NAMES = FALSE)
View(lwd_key2data_key)
lwd_key2usable_key <- as.list(setNames(object = gsub("[~]", "|", tmp_key_v), nm = tmp_key_v ))
tmp_a <- paste(tmp_key_v, gsub("[~]", "|", tmp_key_v))
View(tmp_a)
tmp_ls <- list(tmp_key_v, gsub("[~]", "|", tmp_key_v))
rm(tmp_ls)
tmp_key_v <- names(graph_nel@renderInfo@edges[["lwd"]])
lwd_key2data_key <- as.list(setNames(object = gsub("[~]", "|", tmp_key_v), nm = tmp_key_v ))
for (iName in names(lwd_key2data_key)) {
graph_nel@edgeData@data[[lwd_key2usable_key[[iName]]]][["weight"]] <- graph_nel@renderInfo@edges[["lwd"]][[iName]]
}
View(lwd_key2data_key)
View(lwd_key2usable_key)
View(lwd_key2data_key)
View(lwd_key2data_key)
library(Rgraphviz)
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment_hacked.gv")
source('~/projects/aggressotype/code/galaina/R_code/just_for_playing_with_graph.R')
View(graph_nel)
graph_nel@edgeData@data[["Bully_other|Victim_other"]][["weight"]]
rm(graph_nel)
source('~/projects/aggressotype/code/galaina/R_code/just_for_playing_with_graph.R')
source('~/projects/aggressotype/code/galaina/R_code/just_for_playing_with_graph.R')
source('~/projects/aggressotype/code/galaina/R_code/just_for_playing_with_graph.R')
View(graph_nel)
graph_nel@edgeData@data[["Bully_other|Victim_other"]][["weight"]]
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment_hacked_new.gv")
Rgraphviz::toDot()
View(Rgraphviz::toDot)
View(Rgraphviz:::toDot)
View(Rgraphviz:::toDot)
as.bn(graph_nel)
prova <- as.bn(graph_nel)
write.dot(file = "~/Documents/figures/estonian_experiment_hacked_new.gv", graph = prova)
toDotR(G = graph_nel, filename = "~/Documents/figures/estonian_experiment_hacked_new.gv")
toDotR(G = graph_nel, outDotFile = "~/Documents/figures/estonian_experiment_hacked_new_r.gv")
prova.arcs
View(prova)
prova[['arcs']]
names(prova[['arcs']])
names(prova[['arcs']]) <- c('from', 'to')
write.dot(file = "~/Documents/figures/estonian_experiment_hacked_new.gv", graph = prova)
names(prova[['arcs']])
prova <- as.bn(graph_nel)
colnames(prova[['arcs']]) <- c('from', 'to')
names(prova[['arcs']])
prova <- as.bn(graph_nel)
names(prova[['arcs']])
colnames(prova[['arcs']]) <- c('from', 'to')
prova['arcs']
source('~/projects/aggressotype/code/galaina/R_code/just_for_playing_with_graph.R')
prova <- as.bn(graph_nel)
colnames(prova[['arcs']]) <- c('from', 'to')
write.dot(file = "~/Documents/figures/estonian_experiment_hacked_new.gv", graph = prova)
library(igraph)
gg <- graph_from_graphnel(graph_nel)
write_graph(gg, "~/Documents/figures/igraph.gv", format = "dot" )
source('~/projects/aggressotype/code/galaina/R_code/just_for_playing_with_graph.R')
toDot(graph = graph_nel, filename = "~/Documents/figures/estonian_experiment_penwidth.gv")
View(graph_nel)
graph_nel@renderInfo@edges[['lwd']]
toDotR(G=graph_nel, outDotFile = '~/prova.gv')
toFile(graph = graph_nel,  filename = '~/prova.gv')
library(Rgraphviz)
.libPaths()
library(bnlearn)
View( custom.strength)
View(arc.strength.custom)
View(bnlearn::arc.strength.custom)
View(bnlearn:::arc.strength.custom)
listFunctions_inner <- function(
name,
do.recursive=FALSE,
.do.verbose=FALSE,
.buffer=new.env()
){
..name  <- "listFunctions_inner"
if (!is.character(name) | missing(name)) {
stop(paste(..name, " // expecting 'name' of class 'character'", sep=""))
}
name.0 <- name
if (tryCatch(is.function(get(name)), error=function(e) FALSE)) {
# PROCESS FUNCTIONS
if (.do.verbose) {
message(paste(..name, " // processing function: '", name, "'", sep=""))
}
# Get the function's code:
code <- deparse(get(name))
# break code up into sections preceding left brackets:
left.brackets <- c(unlist(strsplit(code, split="[[:space:]]*\\(")))
out <- sort(unique(unlist(lapply(left.brackets, function (x) {
# Split up according to anything that can't be in a function name.
# split = not alphanumeric, not '_', and not '.'
words <- c(unlist(strsplit(x, split="[^[:alnum:]_.]")))
last.word <- tail(words, 1)
last.word.is.function <- tryCatch(is.function(get(last.word)),
error=function(e) return(FALSE))
out <- last.word[last.word.is.function]
return(out)
}))))
if (do.recursive){
# funs.checked: We need to keep track of which functions
# we've checked to avoid infinite loops.
.buffer$funs.checked <- c(.buffer$funs.checked, name)
funs.next <- out[!(out %in% .buffer$funs.checked)]
if (length(funs.next)) {
out <- sort(unique(unlist(c(out, do.call(c,
lapply(funs.next, function(x) {
if (x == ".Primitive") {
return(NULL)
}
listFunctions_inner(
name=x,
do.recursive=TRUE,
.buffer=.buffer
)
})
)))))
}
}
out <- sort(unique(unlist(out)))
} else {
# PROCESS NAMESPACES
if (.do.verbose) {
message(paste(..name, " // processing namespace: '", name, "'", sep=""))
}
name    <- paste("package", ":", name, sep="")
if (!name %in% search()) {
stop(paste(..name, " // invalid namespace: '", name.0, "'"))
}
# KEEP AS REFERENCE
#        out <- ls(name)
funlist <- lsf.str(name)
out     <- head(funlist, n=length(funlist))
}
out
}
Inner Function 2
listFunctions_inner <- function(
name,
do.recursive=FALSE,
.do.verbose=FALSE,
.buffer=new.env()
){
..name  <- "listFunctions_inner"
if (!is.character(name) | missing(name)) {
stop(paste(..name, " // expecting 'name' of class 'character'", sep=""))
}
name.0 <- name
if (tryCatch(is.function(get(name)), error=function(e) FALSE)) {
# PROCESS FUNCTIONS
if (.do.verbose) {
message(paste(..name, " // processing function: '", name, "'", sep=""))
}
# Get the function's code:
code <- deparse(get(name))
# break code up into sections preceding left brackets:
left.brackets <- c(unlist(strsplit(code, split="[[:space:]]*\\(")))
out <- sort(unique(unlist(lapply(left.brackets, function (x) {
# Split up according to anything that can't be in a function name.
# split = not alphanumeric, not '_', and not '.'
words <- c(unlist(strsplit(x, split="[^[:alnum:]_.]")))
last.word <- tail(words, 1)
last.word.is.function <- tryCatch(is.function(get(last.word)),
error=function(e) return(FALSE))
out <- last.word[last.word.is.function]
return(out)
}))))
if (do.recursive){
# funs.checked: We need to keep track of which functions
# we've checked to avoid infinite loops.
.buffer$funs.checked <- c(.buffer$funs.checked, name)
funs.next <- out[!(out %in% .buffer$funs.checked)]
if (length(funs.next)) {
out <- sort(unique(unlist(c(out, do.call(c,
lapply(funs.next, function(x) {
if (x == ".Primitive") {
return(NULL)
}
listFunctions_inner(
name=x,
do.recursive=TRUE,
.buffer=.buffer
)
})
)))))
}
}
out <- sort(unique(unlist(out)))
} else {
# PROCESS NAMESPACES
if (.do.verbose) {
message(paste(..name, " // processing namespace: '", name, "'", sep=""))
}
name    <- paste("package", ":", name, sep="")
if (!name %in% search()) {
stop(paste(..name, " // invalid namespace: '", name.0, "'"))
}
# KEEP AS REFERENCE
#        out <- ls(name)
funlist <- lsf.str(name)
out     <- head(funlist, n=length(funlist))
}
out
}
listFunctions_inner(custom.strength())
q
listFunctions_inner(custom.strength
)
listFunctions_inner("custom.strength")
listFunctions_inner("averaged.network")
View("averaged.network")
View(averaged.network)
View("custom.strength")
View(custom.strength)
View(arc.strength.custom)
View(bnlearn::arc.strength.custom)
View(bnlearn:::arc.strength.custom)
View(call_bootstrap_arc_coefficients)
View(bnlearn:::call_bootstrap_arc_coefficients)
View(boot.strength)
View(arc.strength.custom)
View(bnlearn:::arc.strength.custom)
View(bnlearn:::call_bootstrap_arc_coefficients)
args <- c("/Users/fabio/projects/aggressotype/code/software/software_demo/config_estonian_restricted_demo_relaxed_less_null.ini")
config <- ConfigParser$new(Sys.getenv(), optionxform=identity)
config$read(filepath = args[1])
path_to_bn_strength_obj <- config$get(option = "output_path_bn_strength_obj", fallback = "", section = "output_paths")
source("test.R")
source("test.R")
source("test.R")
library(utils)
library(tools)  # to get file extension
library(dplyr)  # actually I load it only for filter
library(ggplot2)  # to save in SVG on R installed via homebrew  https://stackoverflow.com/questions/50767445/how-to-fix-failed-to-load-cairo-dll-in-r
library(ggplotify)  # to convert plot to grob objects
library(grid)
library(stringi)  # to check if strings are empty
library(sbgcop)
library(infotheo)
library(BDgraph)
library(pcalg)  # depends on bioconductor
library(bnlearn)
library(ConfigParser)
source('~/projects/aggressotype/code/galaina/R_code/20180725_use_config_ini_final_part.R', echo=TRUE)
args <- c("/Users/fabio/projects/aggressotype/code/software/software_demo/config_estonian_restricted_demo_relaxed_less_null.ini")
args <- c("/Users/fabio/projects/aggressotype/code/software/software_demo/config_estonian_restricted_demo_relaxed_less_null.ini")
config <- ConfigParser$new(Sys.getenv(), optionxform=identity)
config$read(filepath = args[1])
path_to_bn_strength_obj <- config$get(option = "output_path_bn_strength_obj", fallback = "", section = "output_paths")
bn_strength_obj <- readRDS(path_to_bn_strength_obj)
bn_strength_obj <- readRDS(path_to_bn_strength_obj)
View(bn_strength_obj)
View(bn_strength_obj)
View(bn_strength_obj)
View(bn_strength_obj)
output_path_pc_algo_obj <- config$get(option = "output_path_pc_algo_obj", section = "output_paths" )
run2pcalgo_ls <- readRDS(output_path_pc_algo_obj
)
View(run2pcalgo_ls)
tmp_amat <- as(run2pcalgo_ls[[1]], "amat")
View(tmp_amat)
tmp_amat
tmp_bn <- as(run2pcalgo_ls[[1]], "bn")
library(bnlearn)
tmp_bn <- as(run2pcalgo_ls[[1]], "bn")
removed_graph_due_to_blacklist_bv <- sapply(X = run2pcalgo_ls, FUN = is.null)
# cat("Graphs removed due to incompatibility with blacklist", sum(removed_graph_due_to_blacklist_bv), "\n")
print_and_append_to_log(c("Graphs removed due to incompatibility with blacklist", sum(removed_graph_due_to_blacklist_bv), "\n"), fileConn)
bootstrapped_bnlearn_list <- lapply(
X = run2pcalgo_ls[!removed_graph_due_to_blacklist_bv],  # Ignore NULL elements of the list
# X = run2pcalgo_ls[!sapply(run2pcalgo_ls, is.null)],  # Ignore NULL elements of the list
# X = run2pcalgo_ls,
FUN = as.bn,
check.cycles = FALSE   # We are ok with cycles
)
# saveRDS(bootstrapped_graphnel_list, file = args[8])
bootstrapped_bnlearn_list <- lapply(
X = run2pcalgo_ls[!removed_graph_due_to_blacklist_bv],  # Ignore NULL elements of the list
# X = run2pcalgo_ls[!sapply(run2pcalgo_ls, is.null)],  # Ignore NULL elements of the list
# X = run2pcalgo_ls,
FUN = as.bn,
check.cycles = FALSE   # We are ok with cycles
)
removed_graph_due_to_blacklist_bv <- sapply(X = run2pcalgo_ls, FUN = is.null)
bootstrapped_bnlearn_list <- lapply(
X = run2pcalgo_ls[!removed_graph_due_to_blacklist_bv],  # Ignore NULL elements of the list
# X = run2pcalgo_ls[!sapply(run2pcalgo_ls, is.null)],  # Ignore NULL elements of the list
# X = run2pcalgo_ls,
FUN = as.bn,
check.cycles = FALSE   # We are ok with cycles
)
tmpbn <- bootstrapped_bnlearn_list[[1]]
tmpbn
View(tmpbn)
tmpbn[["arcs"]]
run2pcalgo_ls[[1]]$amat
run2pcalgo_ls[[1]]@amat
run2pcalgo_ls[[1]]
plot(x = run2pcalgo_ls[[1]], amat= TRUE)
attributes(run2pcalgo_ls[[1]])
tmp_amat
tmp_amat == tmp_amat
tmp_amat == t(tmp_amat)
tmp_amat[tmp_amat == t(tmp_amat)]
typeof(tmp_amat)
directed_amat <- tmp_amat
directed_amat[tmp_amat != t(tmp_amat)] <- 0
directed_amat
all(directed_amat[directed_amat==directed_amat])
all(directed_amat==directed_amat)
as.bn(tmp_amat)
as(tmp_amat, "pcalgo")
as(tmp_amat, "pcalg")
as(tmp_amat, "pcAlgo")
library(Rgraphviz)  # for toDot
path_to_bn_strength_obj <- config$get(option = "output_path_bn_strength_obj", fallback = "", section = "output_paths")
> path_to_bn_strength_obj <- config$get(option = "output_path_bn_strength_obj", fallback = "", section = "output_paths")
for (iRun_n in 1:causal_discovery_algorithm_run_n) {
#
#
}
source('~/projects/aggressotype/code/galaina/R_code/dumb_script_for_testing_arc_direction.R', echo=TRUE)
tmp_amat <- as(run2pcalgo_ls[[iRun_n]], "amat")
tmp_amat <- as(run2pcalgo_ls[[1]], "amat")
path_pc_algo_obj <- config$get(option = "output_path_pc_algo_obj", section = "output_paths" )
run2pcalgo_ls <- readRDS(path_pc_algo_obj)
causal_discovery_algorithm_run_n <- length(run2pcalgo_ls)
run2directed_amat <- vector(mode = "list", length = causal_discovery_algorithm_run_n)
run2undirected_amat <- vector(mode = "list", length = causal_discovery_algorithm_run_n)
tmp_amat <- as(run2pcalgo_ls[[1]], "amat")
tmp_amat
undirected_edges_in_amat_mask <- (tmp_amat == t(tmp_amat))
View(undirected_edges_in_amat_mask)
View(!(undirected_edges_in_amat_mask))
for (iRun_n in 1:causal_discovery_algorithm_run_n) {
tmp_amat <- as(run2pcalgo_ls[[iRun_n]], "amat")
no_or_undirected_edges_in_amat_mask <- (tmp_amat == t(tmp_amat))  # this captures when transposed elemetns are both 1 or both 0
directed_amat <- tmp_amat
directed_amat[no_or_undirected_edges_in_amat_mask] <- 0
undirected_amat <- tmp_amat
undirected_amat[!(no_or_undirected_edges_in_amat_mask)] <- 0
run2directed_amat_ls[[iRun_n]] <- directed_amat
run2undirected_amat_ls[[iRun_n]] <- undirected_amat
}
causal_discovery_algorithm_run_n <- length(run2pcalgo_ls)
run2directed_amat_ls <- vector(mode = "list", length = causal_discovery_algorithm_run_n)
run2undirected_amat_ls <- vector(mode = "list", length = causal_discovery_algorithm_run_n)
for (iRun_n in 1:causal_discovery_algorithm_run_n) {
tmp_amat <- as(run2pcalgo_ls[[iRun_n]], "amat")
no_or_undirected_edges_in_amat_mask <- (tmp_amat == t(tmp_amat))  # this captures when transposed elemetns are both 1 or both 0
directed_amat <- tmp_amat
directed_amat[no_or_undirected_edges_in_amat_mask] <- 0
undirected_amat <- tmp_amat
undirected_amat[!(no_or_undirected_edges_in_amat_mask)] <- 0
run2directed_amat_ls[[iRun_n]] <- directed_amat
run2undirected_amat_ls[[iRun_n]] <- undirected_amat
}
View(run2undirected_amat)
tmp_amat
View(run2undirected_amat)
rm(run2directed_amat)
rm(run2undirected_amat)
View(run2undirected_amat_ls)
View(run2undirected_amat_ls[[2]])
run2undirected_amat_ls[[2]]
UnArc_mat <- Reduce('+', undirected_amat_ls)
UnArc_mat <- Reduce('+', run2undirected_amat_ls)
DirArc_mat <- Reduce('+', run2directed_amat_ls)
View(UnArc_mat)
UnArc_mat
stopifnot(DirArc_mat == t(DirArc_mat))
DirArc_mat[DirArc_mat == t(DirArc_mat)]
DirArc_mat[DirArc_mat != t(DirArc_mat)]
DirArc_mat
t(DirArc_mat)
stopifnot(UnArc_mat == t(UnArc_mat))
UnArc_mat
Mark_score_mat <- UnArc_mat
Mark_score_mat <- 0 * Mark_score_mat
Mark_score_mat[] <- 0L
Mark_score_mat <- UnArc_mat
Mark_score_mat[] <- 0L
nonzero_position_mask <- (UnArc_mat != 0)
Mark_score_mat[nonzero_position_mask] <- UnArc_mat[nonnonzero_position_mask] / (UnArc_mat[nonnonzero_position_mask] + DirArc_mat[nonnonzero_position_mask])
Mark_score_mat[nonzero_position_mask] <- UnArc_mat[nonzero_position_mask] / (UnArc_mat[nonzero_position_mask] + DirArc_mat[nonzero_position_mask])
Mark_score_mat
data_frame(Mark_score_mat)
tmp_amat %in% c(0,1)
tmp_amat[!(tmp_amat %in% c(0,1))]
set(tmp_amat[!(tmp_amat %in% c(0,1))])
unique(tmp_amat[!(tmp_amat %in% c(0,1))])
unusual_values_v <- !(tmp_amat %in% c(0,1))
any(unusual_values_v)
UnArc_mat <- causal_discovery_algorithm_run_n ^ -1 * Reduce('+', run2undirected_amat_ls)
source('~/projects/aggressotype/code/galaina/R_code/dumb_script_for_testing_arc_direction.R', echo=TRUE)
source('~/projects/aggressotype/code/galaina/R_code/dumb_script_for_testing_arc_direction.R', echo=TRUE)
source('~/projects/aggressotype/code/galaina/R_code/dumb_script_for_testing_arc_direction.R', echo=TRUE)
path ='make/a/try/file.rds'
file_path_sans_ext(path)
cat(file_path_sans_ext(path), '_', str(10), file_ext(path))
print(file_path_sans_ext(path), '_', str(10), file_ext(path))
paste0(file_path_sans_ext(path), '_', str(10), file_ext(path))
paste0(file_path_sans_ext(path), '_', 10 ,'.', file_ext(path))
paste0(file_path_sans_ext(path), '_', string(10) ,'.', file_ext(path))
paste0(file_path_sans_ext(path), '_', 12213 ,'.', file_ext(path))
tmp_amat
sum(no_or_undirected_edges_in_amat_mask)
no_or_undirected_edges_in_amat_mask
sum((tmp_amat == t(tmp_amat)) & (tmp_amat == 1))
sum((tmp_amat == 1))
sum((tmp_amat == t(tmp_amat)) & ((tmp_amat == 1) | t(tmp_amat) == 1))
source('~/projects/aggressotype/code/galaina/R_code/dumb_script_for_testing_arc_direction.R', echo=TRUE)
pcalgo_11 <- run2pcalgo_ls[[11]]
tmp_amat_11 <- as(pcalgo_11, "amat")
tmp_amat_11
sum((tmp_amat_11 == t(tmp_amat_11)) & (tmp_amat_11 == 1))
sum((tmp_amat_11 == t(tmp_amat_11)) & (tmp_amat_11 == 2))
sum((tmp_amat_11 == t(tmp_amat_11)) & ((tmp_amat_11 == 1) | t(tmp_amat_11) == 1))
sum((tmp_amat_11 == t(tmp_amat_11)) & ((tmp_amat_11 == 2) | t(tmp_amat_11) == 2))
sum(tmp_amat_11 == 2)
library(gtools)
as.logical(tmp_amat_11)
tmp_amat_11 != 0
0 tmp_amat_11 != 0
0 + (tmp_amat_11 != 0)
