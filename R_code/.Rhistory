version
system("type R")
locale
Sys.getlocale()
Sys.getlocale()
system("type R")
ile.path(R.home("bin"), "R")
file.path(R.home("bin"), "R")
R.home()
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="~/installed_packages.rda")
getwd(
)
setwd("projects/aggressotype/code/R_code/")
list.files()
list.files
file.list(
)
list.files()
list.files()
list.files()
source(test.R)
source("test.R")
traceback()
source("test.R")
traceback()
source("test.R")
load(file = '/Volumes/encrypted_preprocessed_data/demo_aggressotype_transfer.rda')
data_matrix
data_matrix <- as.numeric(data_matrix)
data_matrix
data_matrix <- data.matrix(data_matrix)
data_matrix
load(file = '/Volumes/encrypted_preprocessed_data/demo_aggressotype_transfer.rda')
tmp_data_matrix <- data.matrix(data_matrix)
head(tmp_data_matrix)
typeof(tmp_data_matrix)
data <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/data_df.csv'
)
data
typeof(data)
data <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/data_df.csv'
)
data <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/data_df.csv', row.names = 1)
typeof(data)
header(data)
head(data)
data_df <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/data_df.csv', row.names = 1)
loading_df <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/loading_df.csv', row.names = 1)
factor_loading_df <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/factor_loading_df.csv', row.names = 1)
data_matrix <- as.matrix(data_df)
data_matrix
factor_loading_df <- read.csv(file = '/Volumes/encrypted_preprocessed_data/data_for_demo/intersection/factor_loading_df.csv', row.names = 1)
factor_names <- colnames(factor_loading_df)
factor_names
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
source("test.R")
source("test.R")
traceback()
Lambda = 1 * (Lambda!=0)
Lambda <- factor_loading_df
Lambda = 1 * (Lambda!=0)
Lambda
index.1 = which(colSums(Lambda) == 1)
index.1
Y <- as.matrix(data_df)
vnames <- colnames(Y)
colnames(Y) <- vnames
Y
R <- NULL
for (j in 1:p) {
R <- cbind(R, match(Y[, j], sort(unique(Y[, j]))))
}
p <- dim(Y)[2]
R <- NULL
for (j in 1:p) {
R <- cbind(R, match(Y[, j], sort(unique(Y[, j]))))
}
R
Rlevels <- apply(R, 2, max, na.rm = TRUE)
Ranks <- apply(Y, 2, rank, ties.method = "average", na.last = "keep")
N <- apply(!is.na(Ranks), 2, sum)
U <- t(t(Ranks)/(N + 1))
Z <- qnorm(U)
# handle categorical variable
Z[, ind.cat] = Y[, ind.cat]
#
Zfill <- matrix(rnorm(n * p), n, p)
Z[is.na(Y)] <- Zfill[is.na(Y)]
# psuedo data of factors with a single indicator
Z1 = eta1 = Z[, index.1]
# psuedo data of response variables
if (k1 == 0) Z2 = Z else Z2 = Z[, -index.1]
# psuedo data of factors with multiple indicators
eta2 = matrix(rnorm(n*k2), n)
eta = cbind(eta1, eta2)
X = cbind(eta, Z2)
source("~/projects/aggressotype/external_code/CopulaFactorModel/R/inferCopulaFactorModel.R")
Rlevels <- apply(R, 2, max, na.rm = TRUE)
Ranks <- apply(Y, 2, rank, ties.method = "average", na.last = "keep")
N <- apply(!is.na(Ranks), 2, sum)
U <- t(t(Ranks)/(N + 1))
Z <- qnorm(U)
# handle categorical variable
Z[, ind.cat] = Y[, ind.cat]
#
Zfill <- matrix(rnorm(n * p), n, p)
Z[is.na(Y)] <- Zfill[is.na(Y)]
# psuedo data of factors with a single indicator
Z1 = eta1 = Z[, index.1]
# psuedo data of response variables
if (k1 == 0) Z2 = Z else Z2 = Z[, -index.1]
# psuedo data of factors with multiple indicators
eta2 = matrix(rnorm(n*k2), n)
eta = cbind(eta1, eta2)
X = cbind(eta, Z2)
n <- dim(Y)[1]
Rlevels <- apply(R, 2, max, na.rm = TRUE)
Ranks <- apply(Y, 2, rank, ties.method = "average", na.last = "keep")
N <- apply(!is.na(Ranks), 2, sum)
U <- t(t(Ranks)/(N + 1))
Z <- qnorm(U)
# handle categorical variable
Z[, ind.cat] = Y[, ind.cat]
#
Zfill <- matrix(rnorm(n * p), n, p)
Z[is.na(Y)] <- Zfill[is.na(Y)]
# psuedo data of factors with a single indicator
Z1 = eta1 = Z[, index.1]
# psuedo data of response variables
if (k1 == 0) Z2 = Z else Z2 = Z[, -index.1]
# psuedo data of factors with multiple indicators
eta2 = matrix(rnorm(n*k2), n)
eta = cbind(eta1, eta2)
X = cbind(eta, Z2)
Y <- as.matrix(Y)
vnames <- colnames(Y)
colnames(Y) <- vnames
# sample size
n <- dim(Y)[1]
# No. of observed variables
p <- dim(Y)[2]
#### handle Lambda and get prior graph G
Lambda = 1 * (Lambda!=0)
# No. of factors
k = ncol(Lambda)
# index of factors with a single indicator
index.1 = which(colSums(Lambda) == 1)
# No. of factors with a single indicator
k1 = length(index.1)
# index of factors with multiple indicators
index.2 = which(colSums(Lambda) > 1)
# No. of factors with multiple indicators
k2 = length(index.2)
## get the pior graph G
G1 = matrix(1,k,k)-diag(k)
if (k1 == 0) G2 = t(Lambda) else G2 = t(Lambda[-index.1,])
G3 = matrix(0,p-k1,p-k1)
G = rbind(cbind(G1,G2),cbind(t(G2),G3))
G[lower.tri(G)] = 0
## prior parameters for the G-Wishart distribution
# degrees of freedom
n0 = p+k2+1
# scale matrix
S0 = diag(p+k2)/n0
#### initialize Z, eta, and S
R <- NULL
for (j in 1:p) {
R <- cbind(R, match(Y[, j], sort(unique(Y[, j]))))
}
Rlevels <- apply(R, 2, max, na.rm = TRUE)
Ranks <- apply(Y, 2, rank, ties.method = "average", na.last = "keep")
N <- apply(!is.na(Ranks), 2, sum)
U <- t(t(Ranks)/(N + 1))
Z <- qnorm(U)
# # handle categorical variable
# Z[, ind.cat] = Y[, ind.cat]
#
Zfill <- matrix(rnorm(n * p), n, p)
Z[is.na(Y)] <- Zfill[is.na(Y)]
# psuedo data of factors with a single indicator
Z1 = eta1 = Z[, index.1]
# psuedo data of response variables
if (k1 == 0) Z2 = Z else Z2 = Z[, -index.1]
# psuedo data of factors with multiple indicators
eta2 = matrix(rnorm(n*k2), n)
eta = cbind(eta1, eta2)
X = cbind(eta, Z2)
S <- cov(X)
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
traceback()
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
source("test.R")
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
source("test.R")
source("test.R")
.Machine$double.eps
rm(list = setdiff(ls(), lsf.str()))
source("test.R")
source("test.R")
source("test.R")
traceback()
cat("Iteration:", 4)
source("test.R")
source("test.R")
source("test.R")
source("test.R")
traceback()
data_df
sum(data_df)
sum(as.matrix(data_df))
sum(data.matrix(data_df))
B = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
B = matrix(
c(2, 4, 3, 1, 5, 7),
nrow=3,
ncol=2)
B
sum(B)
sum(abs(B)
)
norm(B)
norm(B, "E")
norm(B, "F")
sqrt(sum(B^2))
norm(B, "1")
source("test.R")
source("test.R")
a = matrix(rnorm(16), ncol=4)
a
make.symmetric(a, lower.tri=FALSE)
source("test.R")
source("test.R")
traceback()
source("test.R")
traceback()
source("test.R")
source("test.R")
source("test.R")
source("test.R")
